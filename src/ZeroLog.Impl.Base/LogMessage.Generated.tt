<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------
<#@ include file="LogMetadata.ttinclude" #>
using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace ZeroLog;

#nullable enable

partial class LogMessage
{
<#
    foreach (var type in _valueTypes)
    {
#>
    /// <summary>
    /// Appends a value of type <c><#= type.name #></c> to the message.
    /// </summary>
    /// <param name="value">The value to append.</param>
    public LogMessage Append(<#= type.name #> value)
    {
        InternalAppendValueType(value, ArgumentType.<#= type.argType #>);
        return this;
    }

    /// <summary>
    /// Appends a value of type <c><#= type.name #>?</c> to the message.
    /// </summary>
    /// <param name="value">The value to append.</param>
    public LogMessage Append(<#= type.name #>? value)
    {
        InternalAppendValueType(value, ArgumentType.<#= type.argType #>);
        return this;
    }

<#
        if (type.isFormattable)
        {
#>
    /// <summary>
    /// Appends a value of type <c><#= type.name #></c> to the message.
    /// </summary>
    /// <param name="value">The value to append.</param>
    /// <param name="format">The format string.</param>
    public LogMessage Append(<#= type.name #> value, string format)
    {
        InternalAppendValueType(value, format, ArgumentType.<#= type.argType #>);
        return this;
    }

    /// <summary>
    /// Appends a value of type <c><#= type.name #>?</c> to the message.
    /// </summary>
    /// <param name="value">The value to append.</param>
    /// <param name="format">The format string.</param>
    public LogMessage Append(<#= type.name #>? value, string format)
    {
        InternalAppendValueType(value, format, ArgumentType.<#= type.argType #>);
        return this;
    }

<#
        }
#>
    /// <summary>
    /// Appends a value of type <c><#= type.name #></c> to the message metadata.
    /// </summary>
    /// <param name="key">The key.</param>
    /// <param name="value">The value.</param>
    public LogMessage AppendKeyValue(string key, <#= type.name #> value)
    {
        InternalAppendKeyValue(key, value, ArgumentType.<#= type.argType #>);
        return this;
    }

    /// <summary>
    /// Appends a value of type <c><#= type.name #>?</c> to the message metadata.
    /// </summary>
    /// <param name="key">The key.</param>
    /// <param name="value">The value.</param>
    public LogMessage AppendKeyValue(string key, <#= type.name #>? value)
    {
        InternalAppendKeyValue(key, value, ArgumentType.<#= type.argType #>);
        return this;
    }

<#
    }
#>
    /// <summary>
    /// Appends an interpolated string to the message.
    /// </summary>
    /// <param name="value">The value to append.</param>
    public LogMessage Append([InterpolatedStringHandlerArgument("")] AppendInterpolatedStringHandler value)
        => this;

    partial struct AppendInterpolatedStringHandler
    {
<#
        foreach (var type in _valueTypes)
        {
#>
        /// <summary>
        /// Appends a value of type <c><#= type.name #></c> to the handler.
        /// </summary>
        /// <param name="value">The value to append.</param>
        public void AppendFormatted(<#= type.name #> value)
            => _message.InternalAppendValueType(value, ArgumentType.<#= type.argType #>);

        /// <summary>
        /// Appends a value of type <c><#= type.name #>?</c> to the handler.
        /// </summary>
        /// <param name="value">The value to append.</param>
        public void AppendFormatted(<#= type.name #>? value)
            => _message.InternalAppendValueType(value, ArgumentType.<#= type.argType #>);

<#
            if (type.isFormattable)
            {
#>
        /// <summary>
        /// Appends a value of type <c><#= type.name #></c> to the handler.
        /// </summary>
        /// <param name="value">The value to append.</param>
        /// <param name="format">The format string.</param>
        public void AppendFormatted(<#= type.name #> value, string format)
            => _message.InternalAppendValueType(value, format, ArgumentType.<#= type.argType #>);

        /// <summary>
        /// Appends a value of type <c><#= type.name #>?</c> to the handler.
        /// </summary>
        /// <param name="value">The value to append.</param>
        /// <param name="format">The format string.</param>
        public void AppendFormatted(<#= type.name #>? value, string format)
            => _message.InternalAppendValueType(value, format, ArgumentType.<#= type.argType #>);

<#
            }
        }
#>
    }
}
