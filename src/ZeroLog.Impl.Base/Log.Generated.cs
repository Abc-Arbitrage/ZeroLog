//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace ZeroLog;

#nullable enable

partial class Log
{
    public bool IsTraceEnabled => Level.Trace >= _logLevel;
    public bool IsDebugEnabled => Level.Debug >= _logLevel;
    public bool IsInfoEnabled => Level.Info >= _logLevel;
    public bool IsWarnEnabled => Level.Warn >= _logLevel;
    public bool IsErrorEnabled => Level.Error >= _logLevel;
    public bool IsFatalEnabled => Level.Fatal >= _logLevel;

    public LogMessage Trace()
        => ForLevel(Level.Trace);

    public void Trace(string? message)
    {
        var logMessage = ForLevel(Level.Trace);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Trace(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Trace);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Trace([InterpolatedStringHandlerArgument("")] TraceInterpolatedStringHandler message)
        => message.Message.Log();

    public void Trace([InterpolatedStringHandlerArgument("")] TraceInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    public LogMessage Debug()
        => ForLevel(Level.Debug);

    public void Debug(string? message)
    {
        var logMessage = ForLevel(Level.Debug);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Debug(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Debug);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Debug([InterpolatedStringHandlerArgument("")] DebugInterpolatedStringHandler message)
        => message.Message.Log();

    public void Debug([InterpolatedStringHandlerArgument("")] DebugInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    public LogMessage Info()
        => ForLevel(Level.Info);

    public void Info(string? message)
    {
        var logMessage = ForLevel(Level.Info);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Info(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Info);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Info([InterpolatedStringHandlerArgument("")] InfoInterpolatedStringHandler message)
        => message.Message.Log();

    public void Info([InterpolatedStringHandlerArgument("")] InfoInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    public LogMessage Warn()
        => ForLevel(Level.Warn);

    public void Warn(string? message)
    {
        var logMessage = ForLevel(Level.Warn);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Warn(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Warn);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Warn([InterpolatedStringHandlerArgument("")] WarnInterpolatedStringHandler message)
        => message.Message.Log();

    public void Warn([InterpolatedStringHandlerArgument("")] WarnInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    public LogMessage Error()
        => ForLevel(Level.Error);

    public void Error(string? message)
    {
        var logMessage = ForLevel(Level.Error);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Error(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Error);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Error([InterpolatedStringHandlerArgument("")] ErrorInterpolatedStringHandler message)
        => message.Message.Log();

    public void Error([InterpolatedStringHandlerArgument("")] ErrorInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    public LogMessage Fatal()
        => ForLevel(Level.Fatal);

    public void Fatal(string? message)
    {
        var logMessage = ForLevel(Level.Fatal);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Fatal(string? message, Exception? ex)
    {
        var logMessage = ForLevel(Level.Fatal);
        logMessage.InternalAppendString(message);
        logMessage.Exception = ex;
        logMessage.Log();
    }

    public void Fatal([InterpolatedStringHandlerArgument("")] FatalInterpolatedStringHandler message)
        => message.Message.Log();

    public void Fatal([InterpolatedStringHandlerArgument("")] FatalInterpolatedStringHandler message, Exception? ex)
    {
        message.Message.Exception = ex;
        message.Message.Log();
    }

    [InterpolatedStringHandler]
    public readonly ref struct TraceInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public TraceInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsTraceEnabled)
            {
                Message = log.GetLogMessage(Level.Trace);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

    [InterpolatedStringHandler]
    public readonly ref struct DebugInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public DebugInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsDebugEnabled)
            {
                Message = log.GetLogMessage(Level.Debug);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

    [InterpolatedStringHandler]
    public readonly ref struct InfoInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public InfoInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsInfoEnabled)
            {
                Message = log.GetLogMessage(Level.Info);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

    [InterpolatedStringHandler]
    public readonly ref struct WarnInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public WarnInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsWarnEnabled)
            {
                Message = log.GetLogMessage(Level.Warn);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

    [InterpolatedStringHandler]
    public readonly ref struct ErrorInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public ErrorInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsErrorEnabled)
            {
                Message = log.GetLogMessage(Level.Error);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

    [InterpolatedStringHandler]
    public readonly ref struct FatalInterpolatedStringHandler
    {
        internal readonly LogMessage Message;

        [SuppressMessage("ReSharper", "UnusedParameter.Local")]
        public FatalInterpolatedStringHandler(int literalLength, int formattedCount, Log log, out bool isEnabled)
        {
#if NETSTANDARD
            Message = LogMessage.Empty;
            isEnabled = false;
#else
            if (log.IsFatalEnabled)
            {
                Message = log.GetLogMessage(Level.Fatal);
                isEnabled = true;
            }
            else
            {
                Message = LogMessage.Empty;
                isEnabled = false;
            }
#endif
        }

        public void AppendLiteral(string value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(string? value)
            => Message.InternalAppendString(value);

        public void AppendFormatted(bool value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(bool? value)
            => Message.InternalAppendValueType(value, ArgumentType.Boolean);

        public void AppendFormatted(byte value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte? value)
            => Message.InternalAppendValueType(value, ArgumentType.Byte);

        public void AppendFormatted(byte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(byte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Byte);

        public void AppendFormatted(sbyte value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value)
            => Message.InternalAppendValueType(value, ArgumentType.SByte);

        public void AppendFormatted(sbyte value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(sbyte? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.SByte);

        public void AppendFormatted(char value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(char? value)
            => Message.InternalAppendValueType(value, ArgumentType.Char);

        public void AppendFormatted(short value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int16);

        public void AppendFormatted(short value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(short? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int16);

        public void AppendFormatted(ushort value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt16);

        public void AppendFormatted(ushort value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(ushort? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt16);

        public void AppendFormatted(int value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int32);

        public void AppendFormatted(int value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(int? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int32);

        public void AppendFormatted(uint value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt32);

        public void AppendFormatted(uint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(uint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt32);

        public void AppendFormatted(long value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long? value)
            => Message.InternalAppendValueType(value, ArgumentType.Int64);

        public void AppendFormatted(long value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(long? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Int64);

        public void AppendFormatted(ulong value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value)
            => Message.InternalAppendValueType(value, ArgumentType.UInt64);

        public void AppendFormatted(ulong value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(ulong? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UInt64);

        public void AppendFormatted(nint value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value)
            => Message.InternalAppendValueType(value, ArgumentType.IntPtr);

        public void AppendFormatted(nint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.IntPtr);

        public void AppendFormatted(nuint value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value)
            => Message.InternalAppendValueType(value, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(nuint? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.UIntPtr);

        public void AppendFormatted(float value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float? value)
            => Message.InternalAppendValueType(value, ArgumentType.Single);

        public void AppendFormatted(float value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(float? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Single);

        public void AppendFormatted(double value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double? value)
            => Message.InternalAppendValueType(value, ArgumentType.Double);

        public void AppendFormatted(double value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(double? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Double);

        public void AppendFormatted(decimal value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value)
            => Message.InternalAppendValueType(value, ArgumentType.Decimal);

        public void AppendFormatted(decimal value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(decimal? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Decimal);

        public void AppendFormatted(Guid value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid? value)
            => Message.InternalAppendValueType(value, ArgumentType.Guid);

        public void AppendFormatted(Guid value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(Guid? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.Guid);

        public void AppendFormatted(DateTime value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value)
            => Message.InternalAppendValueType(value, ArgumentType.DateTime);

        public void AppendFormatted(DateTime value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(DateTime? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.DateTime);

        public void AppendFormatted(TimeSpan value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value)
            => Message.InternalAppendValueType(value, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted(TimeSpan? value, string format)
            => Message.InternalAppendValueType(value, format, ArgumentType.TimeSpan);

        public void AppendFormatted<T>(T value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

        public void AppendFormatted<T>(T? value) where T : struct, Enum
            => Message.InternalAppendEnum(value);

    }

}
