
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace ZeroLog;

#nullable enable

partial interface ILog
{
    bool IsDebugEnabled { get; }
    bool IsInfoEnabled { get; }
    bool IsWarnEnabled { get; }
    bool IsErrorEnabled { get; }
    bool IsFatalEnabled { get; }

    LogMessage Debug();
    void Debug(string? message);
    void Debug(string? message, Exception? ex);

    LogMessage Info();
    void Info(string? message);
    void Info(string? message, Exception? ex);

    LogMessage Warn();
    void Warn(string? message);
    void Warn(string? message, Exception? ex);

    LogMessage Error();
    void Error(string? message);
    void Error(string? message, Exception? ex);

    LogMessage Fatal();
    void Fatal(string? message);
    void Fatal(string? message, Exception? ex);

}

partial class Log
{
    public bool IsDebugEnabled => Level.Debug >= _logLevel;

    public LogMessage Debug()
    {
        return IsDebugEnabled
            ? GetLogMessage(Level.Debug)
            : LogMessage.Empty;
    }

    public void Debug(string? message)
    {
        if (!IsDebugEnabled)
            return;

        var logMessage = GetLogMessage(Level.Debug);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Debug(string? message, Exception? ex)
    {
        if (!IsDebugEnabled)
            return;

        var logMessage = GetLogMessage(Level.Debug);
        logMessage.InternalAppendString(message);
        logMessage.InternalAppendString(ex?.ToString());
        logMessage.Log();
    }

    public bool IsInfoEnabled => Level.Info >= _logLevel;

    public LogMessage Info()
    {
        return IsInfoEnabled
            ? GetLogMessage(Level.Info)
            : LogMessage.Empty;
    }

    public void Info(string? message)
    {
        if (!IsInfoEnabled)
            return;

        var logMessage = GetLogMessage(Level.Info);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Info(string? message, Exception? ex)
    {
        if (!IsInfoEnabled)
            return;

        var logMessage = GetLogMessage(Level.Info);
        logMessage.InternalAppendString(message);
        logMessage.InternalAppendString(ex?.ToString());
        logMessage.Log();
    }

    public bool IsWarnEnabled => Level.Warn >= _logLevel;

    public LogMessage Warn()
    {
        return IsWarnEnabled
            ? GetLogMessage(Level.Warn)
            : LogMessage.Empty;
    }

    public void Warn(string? message)
    {
        if (!IsWarnEnabled)
            return;

        var logMessage = GetLogMessage(Level.Warn);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Warn(string? message, Exception? ex)
    {
        if (!IsWarnEnabled)
            return;

        var logMessage = GetLogMessage(Level.Warn);
        logMessage.InternalAppendString(message);
        logMessage.InternalAppendString(ex?.ToString());
        logMessage.Log();
    }

    public bool IsErrorEnabled => Level.Error >= _logLevel;

    public LogMessage Error()
    {
        return IsErrorEnabled
            ? GetLogMessage(Level.Error)
            : LogMessage.Empty;
    }

    public void Error(string? message)
    {
        if (!IsErrorEnabled)
            return;

        var logMessage = GetLogMessage(Level.Error);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Error(string? message, Exception? ex)
    {
        if (!IsErrorEnabled)
            return;

        var logMessage = GetLogMessage(Level.Error);
        logMessage.InternalAppendString(message);
        logMessage.InternalAppendString(ex?.ToString());
        logMessage.Log();
    }

    public bool IsFatalEnabled => Level.Fatal >= _logLevel;

    public LogMessage Fatal()
    {
        return IsFatalEnabled
            ? GetLogMessage(Level.Fatal)
            : LogMessage.Empty;
    }

    public void Fatal(string? message)
    {
        if (!IsFatalEnabled)
            return;

        var logMessage = GetLogMessage(Level.Fatal);
        logMessage.InternalAppendString(message);
        logMessage.Log();
    }

    public void Fatal(string? message, Exception? ex)
    {
        if (!IsFatalEnabled)
            return;

        var logMessage = GetLogMessage(Level.Fatal);
        logMessage.InternalAppendString(message);
        logMessage.InternalAppendString(ex?.ToString());
        logMessage.Log();
    }

}
