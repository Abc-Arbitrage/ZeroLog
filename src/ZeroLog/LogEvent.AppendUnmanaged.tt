<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    var bools = new[] { false, true };

    var cases = from isNullable in bools
                from isRef in bools
                from isFormattable in bools
                select (isNullable, isRef, isFormattable);

    static string GetSignature(bool isNullable, bool isRef, bool isFormattable)
    {
        return $"ILogEvent AppendUnmanaged<T>({(isRef ? "ref " : "")}T{(isNullable ? "?" : "")} value{(isFormattable ? ", string format" : "")})";
    }
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using ZeroLog.Utils;

namespace ZeroLog
{
    partial interface ILogEvent
    {
<#
    foreach (var (isNullable, isRef, isFormattable) in cases)
    {
#>
        <#= GetSignature(isNullable, isRef, isFormattable) #>
            where T : unmanaged;

<#
    }
#>
    }

    unsafe partial class LogEvent
    {
<#
    foreach (var (isNullable, isRef, isFormattable) in cases)
    {
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#= GetSignature(isNullable, isRef, isFormattable) #>
            where T : unmanaged
        {
            if (!PrepareAppend(sizeof(ArgumentType)<#= isFormattable ? " + sizeof(byte)" : "" #> + sizeof(UnmanagedArgHeader) + sizeof(T)))
                return this;

<#
    if (isNullable)
    {
#>
            if (value == null)
            {
                AppendArgumentType(ArgumentType.Null);
                return this;
            }

<#
    }
#>
<#
    if (isFormattable)
    {
#>
            AppendArgumentTypeWithFormat(ArgumentType.Unmanaged);
            AppendString(format);
<#
    }
    else
    {
#>
            AppendArgumentType(ArgumentType.Unmanaged);
<#
    }
#>
            *(UnmanagedArgHeader*)_dataPointer = new UnmanagedArgHeader(TypeUtil<T>.TypeHandle, sizeof(T));
            _dataPointer += sizeof(UnmanagedArgHeader);
            *(T*)_dataPointer = value<#= isNullable ? ".GetValueOrDefault()" : "" #>;
            _dataPointer += sizeof(T);
            return this;
        }

<#
    }
#>
    }

    partial class NoopLogEvent
    {
<#
    foreach (var (isNullable, isRef, isFormattable) in cases)
    {
#>
        public <#= GetSignature(isNullable, isRef, isFormattable) #>
            where T : unmanaged
            => this;

<#
    }
#>
    }

    partial class ForwardingLogEvent
    {
<#
    foreach (var (isNullable, isRef, isFormattable) in cases)
    {
#>
        public <#= GetSignature(isNullable, isRef, isFormattable) #>
            where T : unmanaged
            => this;

<#
    }
#>
    }
}
