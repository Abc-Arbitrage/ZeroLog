<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
    var loggableLevelNames = new[] { "Debug", "Info", "Warn", "Error", "Fatal" };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using JetBrains.Annotations;

namespace ZeroLog
{
    partial interface ILog
    {
<#
    foreach (var levelName in loggableLevelNames)
    {
#>
        bool Is<#= levelName #>Enabled { get; }
<#
    }
#>

<#
    foreach (var levelName in loggableLevelNames)
    {
#>
        ILogEvent <#= levelName #>();
        void <#= levelName #>(string? message);
        void <#= levelName #>(string? message, Exception? ex);

<#
    }
#>
    }

    partial class Log
    {
<#
        foreach (var levelName in loggableLevelNames)
        {
#>
        public bool Is<#= levelName #>Enabled => Level.<#= levelName #> >= _logLevel;

        public ILogEvent <#= levelName #>()
        {
            return Is<#= levelName #>Enabled
                ? GetLogEventFor(Level.<#= levelName #>)
                : NoopLogEvent.Instance;
        }

        public void <#= levelName #>(string? message)
        {
            if (!Is<#= levelName #>Enabled)
                return;

            GetLogEventFor(Level.<#= levelName #>).Append(message).Log();
        }

        public void <#= levelName #>(string? message, Exception? ex)
        {
            if (!Is<#= levelName #>Enabled)
                return;

            var logEvent = GetLogEventFor(Level.<#= levelName #>);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

<#
        }
#>
    }

    partial class NoopLogManager
    {
        partial class NoopLog
        {
<#
        foreach (var levelName in loggableLevelNames)
        {
#>
            public bool Is<#= levelName #>Enabled => false;

            public ILogEvent <#= levelName #>()
                => NoopLogEvent.Instance;

            public void <#= levelName #>(string? message)
            {
            }

            public void <#= levelName #>(string? message, Exception? ex)
            {
            }
<#
        }
#>
        }
    }
}
