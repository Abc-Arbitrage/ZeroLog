//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using JetBrains.Annotations;

namespace ZeroLog
{
    partial interface ILog
    {
        bool IsDebugEnabled { get; }
        bool IsInfoEnabled { get; }
        bool IsWarnEnabled { get; }
        bool IsErrorEnabled { get; }
        bool IsFatalEnabled { get; }

        ILogEvent Debug();
        void Debug(string? message);
        void Debug(string? message, Exception? ex);
        void DebugFormat<T0>(string format, T0 arg0);
        void DebugFormat<T0, T1>(string format, T0 arg0, T1 arg1);
        void DebugFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2);
        void DebugFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        void DebugFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        void DebugFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        void DebugFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        void DebugFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

        ILogEvent Info();
        void Info(string? message);
        void Info(string? message, Exception? ex);
        void InfoFormat<T0>(string format, T0 arg0);
        void InfoFormat<T0, T1>(string format, T0 arg0, T1 arg1);
        void InfoFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2);
        void InfoFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        void InfoFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        void InfoFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        void InfoFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        void InfoFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

        ILogEvent Warn();
        void Warn(string? message);
        void Warn(string? message, Exception? ex);
        void WarnFormat<T0>(string format, T0 arg0);
        void WarnFormat<T0, T1>(string format, T0 arg0, T1 arg1);
        void WarnFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2);
        void WarnFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        void WarnFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        void WarnFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        void WarnFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        void WarnFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

        ILogEvent Error();
        void Error(string? message);
        void Error(string? message, Exception? ex);
        void ErrorFormat<T0>(string format, T0 arg0);
        void ErrorFormat<T0, T1>(string format, T0 arg0, T1 arg1);
        void ErrorFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2);
        void ErrorFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        void ErrorFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        void ErrorFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        void ErrorFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        void ErrorFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

        ILogEvent Fatal();
        void Fatal(string? message);
        void Fatal(string? message, Exception? ex);
        void FatalFormat<T0>(string format, T0 arg0);
        void FatalFormat<T0, T1>(string format, T0 arg0, T1 arg1);
        void FatalFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2);
        void FatalFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
        void FatalFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        void FatalFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        void FatalFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        void FatalFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

    }

    partial class Log
    {
        public bool IsDebugEnabled => Level.Debug >= _logLevel;

        public ILogEvent Debug()
        {
            return IsDebugEnabled
                ? GetLogEventFor(Level.Debug)
                : NoopLogEvent.Instance;
        }

        public void Debug(string? message)
        {
            if (!IsDebugEnabled)
                return;

            GetLogEventFor(Level.Debug).Append(message).Log();
        }

        public void Debug(string? message, Exception? ex)
        {
            if (!IsDebugEnabled)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0>(string format, T0 arg0)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1>(string format, T0 arg0, T1 arg1)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void DebugFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (!IsDebugEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Debug);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.AppendGeneric(arg7);
            logEvent.Log();
        }

        public bool IsInfoEnabled => Level.Info >= _logLevel;

        public ILogEvent Info()
        {
            return IsInfoEnabled
                ? GetLogEventFor(Level.Info)
                : NoopLogEvent.Instance;
        }

        public void Info(string? message)
        {
            if (!IsInfoEnabled)
                return;

            GetLogEventFor(Level.Info).Append(message).Log();
        }

        public void Info(string? message, Exception? ex)
        {
            if (!IsInfoEnabled)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0>(string format, T0 arg0)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1>(string format, T0 arg0, T1 arg1)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void InfoFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (!IsInfoEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Info);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.AppendGeneric(arg7);
            logEvent.Log();
        }

        public bool IsWarnEnabled => Level.Warn >= _logLevel;

        public ILogEvent Warn()
        {
            return IsWarnEnabled
                ? GetLogEventFor(Level.Warn)
                : NoopLogEvent.Instance;
        }

        public void Warn(string? message)
        {
            if (!IsWarnEnabled)
                return;

            GetLogEventFor(Level.Warn).Append(message).Log();
        }

        public void Warn(string? message, Exception? ex)
        {
            if (!IsWarnEnabled)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0>(string format, T0 arg0)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1>(string format, T0 arg0, T1 arg1)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void WarnFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (!IsWarnEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Warn);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.AppendGeneric(arg7);
            logEvent.Log();
        }

        public bool IsErrorEnabled => Level.Error >= _logLevel;

        public ILogEvent Error()
        {
            return IsErrorEnabled
                ? GetLogEventFor(Level.Error)
                : NoopLogEvent.Instance;
        }

        public void Error(string? message)
        {
            if (!IsErrorEnabled)
                return;

            GetLogEventFor(Level.Error).Append(message).Log();
        }

        public void Error(string? message, Exception? ex)
        {
            if (!IsErrorEnabled)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0>(string format, T0 arg0)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1>(string format, T0 arg0, T1 arg1)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void ErrorFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (!IsErrorEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Error);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.AppendGeneric(arg7);
            logEvent.Log();
        }

        public bool IsFatalEnabled => Level.Fatal >= _logLevel;

        public ILogEvent Fatal()
        {
            return IsFatalEnabled
                ? GetLogEventFor(Level.Fatal)
                : NoopLogEvent.Instance;
        }

        public void Fatal(string? message)
        {
            if (!IsFatalEnabled)
                return;

            GetLogEventFor(Level.Fatal).Append(message).Log();
        }

        public void Fatal(string? message, Exception? ex)
        {
            if (!IsFatalEnabled)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.Append(message);
            logEvent.Append(ex?.ToString());
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0>(string format, T0 arg0)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1>(string format, T0 arg0, T1 arg1)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.Log();
        }

        [StringFormatMethod("format")]
        public void FatalFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            if (!IsFatalEnabled || format is null)
                return;

            var logEvent = GetLogEventFor(Level.Fatal);
            logEvent.AppendFormat(format);
            logEvent.AppendGeneric(arg0);
            logEvent.AppendGeneric(arg1);
            logEvent.AppendGeneric(arg2);
            logEvent.AppendGeneric(arg3);
            logEvent.AppendGeneric(arg4);
            logEvent.AppendGeneric(arg5);
            logEvent.AppendGeneric(arg6);
            logEvent.AppendGeneric(arg7);
            logEvent.Log();
        }

    }

    partial class NoopLogManager
    {
        partial class NoopLog
        {
            public bool IsDebugEnabled => false;

            public ILogEvent Debug()
                => NoopLogEvent.Instance;

            public void Debug(string? message)
            {
            }

            public void Debug(string? message, Exception? ex)
            {
            }

            public void DebugFormat<T0>(string format, T0 arg0)
            {
            }

            public void DebugFormat<T0, T1>(string format, T0 arg0, T1 arg1)
            {
            }

            public void DebugFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
            {
            }

            public void DebugFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
            {
            }

            public void DebugFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
            {
            }

            public void DebugFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
            {
            }

            public void DebugFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
            {
            }

            public void DebugFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
            {
            }

            public bool IsInfoEnabled => false;

            public ILogEvent Info()
                => NoopLogEvent.Instance;

            public void Info(string? message)
            {
            }

            public void Info(string? message, Exception? ex)
            {
            }

            public void InfoFormat<T0>(string format, T0 arg0)
            {
            }

            public void InfoFormat<T0, T1>(string format, T0 arg0, T1 arg1)
            {
            }

            public void InfoFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
            {
            }

            public void InfoFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
            {
            }

            public void InfoFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
            {
            }

            public void InfoFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
            {
            }

            public void InfoFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
            {
            }

            public void InfoFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
            {
            }

            public bool IsWarnEnabled => false;

            public ILogEvent Warn()
                => NoopLogEvent.Instance;

            public void Warn(string? message)
            {
            }

            public void Warn(string? message, Exception? ex)
            {
            }

            public void WarnFormat<T0>(string format, T0 arg0)
            {
            }

            public void WarnFormat<T0, T1>(string format, T0 arg0, T1 arg1)
            {
            }

            public void WarnFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
            {
            }

            public void WarnFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
            {
            }

            public void WarnFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
            {
            }

            public void WarnFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
            {
            }

            public void WarnFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
            {
            }

            public void WarnFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
            {
            }

            public bool IsErrorEnabled => false;

            public ILogEvent Error()
                => NoopLogEvent.Instance;

            public void Error(string? message)
            {
            }

            public void Error(string? message, Exception? ex)
            {
            }

            public void ErrorFormat<T0>(string format, T0 arg0)
            {
            }

            public void ErrorFormat<T0, T1>(string format, T0 arg0, T1 arg1)
            {
            }

            public void ErrorFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
            {
            }

            public void ErrorFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
            {
            }

            public void ErrorFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
            {
            }

            public void ErrorFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
            {
            }

            public void ErrorFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
            {
            }

            public void ErrorFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
            {
            }

            public bool IsFatalEnabled => false;

            public ILogEvent Fatal()
                => NoopLogEvent.Instance;

            public void Fatal(string? message)
            {
            }

            public void Fatal(string? message, Exception? ex)
            {
            }

            public void FatalFormat<T0>(string format, T0 arg0)
            {
            }

            public void FatalFormat<T0, T1>(string format, T0 arg0, T1 arg1)
            {
            }

            public void FatalFormat<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
            {
            }

            public void FatalFormat<T0, T1, T2, T3>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3)
            {
            }

            public void FatalFormat<T0, T1, T2, T3, T4>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
            {
            }

            public void FatalFormat<T0, T1, T2, T3, T4, T5>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
            {
            }

            public void FatalFormat<T0, T1, T2, T3, T4, T5, T6>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
            {
            }

            public void FatalFormat<T0, T1, T2, T3, T4, T5, T6, T7>(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
            {
            }

        }
    }
}
