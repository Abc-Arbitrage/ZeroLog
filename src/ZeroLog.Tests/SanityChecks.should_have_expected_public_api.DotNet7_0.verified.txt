namespace ZeroLog.Appenders
{
    public abstract class Appender : System.IDisposable
    {
        protected Appender() { }
        public ZeroLog.LogLevel Level { get; init; }
        public virtual void Dispose() { }
        public virtual void Flush() { }
        public abstract void WriteMessage(ZeroLog.Formatting.LoggedMessage message);
    }
    public class ConsoleAppender : ZeroLog.Appenders.StreamAppender
    {
        public ConsoleAppender() { }
        public bool ColorOutput { get; init; }
        public override void Flush() { }
        public override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
    }
    public class DateAndSizeRollingFileAppender : ZeroLog.Appenders.StreamAppender
    {
        public DateAndSizeRollingFileAppender(string directory) { }
        public string Directory { get; }
        public string FileExtension { get; init; }
        public string FileNamePrefix { get; init; }
        public long MaxFileSizeInBytes { get; init; }
        public override void Dispose() { }
        protected virtual void FileClosing() { }
        protected virtual void FileOpened() { }
        protected virtual string GetFileName(System.DateOnly date, int number) { }
        public override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
    }
    public sealed class NoopAppender : ZeroLog.Appenders.Appender
    {
        public NoopAppender() { }
        public override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
    }
    public abstract class StreamAppender : ZeroLog.Appenders.Appender
    {
        protected StreamAppender() { }
        protected System.Text.Encoding Encoding { get; set; }
        protected System.IO.Stream? Stream { get; set; }
        public ZeroLog.Formatting.Formatter Formatter { get; init; }
        public override void Dispose() { }
        public override void Flush() { }
        public override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
    }
    public class TextWriterAppender : ZeroLog.Appenders.Appender
    {
        public TextWriterAppender() { }
        public TextWriterAppender(System.IO.TextWriter? textWriter) { }
        public System.IO.TextWriter? TextWriter { get; set; }
        public ZeroLog.Formatting.Formatter Formatter { get; init; }
        public override void Dispose() { }
        public override void Flush() { }
        public override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
    }
}
namespace ZeroLog.Configuration
{
    public sealed class AppenderConfiguration
    {
        public AppenderConfiguration(ZeroLog.Appenders.Appender appender) { }
        public ZeroLog.Appenders.Appender Appender { get; }
        public ZeroLog.LogLevel Level { get; set; }
        public static ZeroLog.Configuration.AppenderConfiguration op_Implicit(ZeroLog.Appenders.Appender appender) { }
    }
    public enum AppendingStrategy
    {
        Asynchronous = 0,
        Synchronous = 1,
    }
    public interface ILoggerConfigurationCollection : System.Collections.Generic.ICollection<ZeroLog.Configuration.LoggerConfiguration>, System.Collections.Generic.IEnumerable<ZeroLog.Configuration.LoggerConfiguration>, System.Collections.IEnumerable
    {
        void Add(string name, ZeroLog.LogLevel level);
    }
    public enum LogMessagePoolExhaustionStrategy
    {
        DropLogMessageAndNotifyAppenders = 0,
        DropLogMessage = 1,
        WaitUntilAvailable = 2,
        Allocate = 3,
        Default = 0,
    }
    public sealed class LoggerConfiguration
    {
        public LoggerConfiguration(string name) { }
        public LoggerConfiguration(System.Type type) { }
        public LoggerConfiguration(string name, ZeroLog.LogLevel level) { }
        public LoggerConfiguration(System.Type type, ZeroLog.LogLevel level) { }
        public System.Collections.Generic.ICollection<ZeroLog.Configuration.AppenderConfiguration> Appenders { get; }
        public bool IncludeParentAppenders { get; set; }
        public ZeroLog.LogLevel? Level { get; set; }
        public ZeroLog.Configuration.LogMessagePoolExhaustionStrategy? LogMessagePoolExhaustionStrategy { get; set; }
        public string Name { get; }
    }
    public sealed class RootLoggerConfiguration
    {
        public System.Collections.Generic.ICollection<ZeroLog.Configuration.AppenderConfiguration> Appenders { get; }
        public ZeroLog.LogLevel Level { get; set; }
        public ZeroLog.Configuration.LogMessagePoolExhaustionStrategy LogMessagePoolExhaustionStrategy { get; set; }
    }
    public sealed class ZeroLogConfiguration
    {
        public ZeroLogConfiguration() { }
        public System.TimeSpan AppenderQuarantineDelay { get; set; }
        public bool AutoRegisterEnums { get; set; }
        public ZeroLog.Configuration.ILoggerConfigurationCollection Loggers { get; }
        public string NullDisplayString { get; set; }
        public ZeroLog.Configuration.RootLoggerConfiguration RootLogger { get; }
        public string TruncatedMessageSuffix { get; set; }
        public ZeroLog.Configuration.AppendingStrategy AppendingStrategy { get; init; }
        public int LogMessageBufferSize { get; init; }
        public int LogMessagePoolSize { get; init; }
        public int LogMessageStringCapacity { get; init; }
        public bool UseBackgroundThread { get; init; }
        public void ApplyChanges() { }
        public void SetLogLevel(string? loggerName, ZeroLog.LogLevel? logLevel) { }
        public static ZeroLog.Configuration.ZeroLogConfiguration CreateTestConfiguration() { }
    }
}
namespace ZeroLog.Formatting
{
    public sealed class DefaultFormatter : ZeroLog.Formatting.Formatter
    {
        public DefaultFormatter() { }
        public string JsonSeparator { get; init; }
        public string PrefixPattern { get; init; }
        protected override void WriteMessage(ZeroLog.Formatting.LoggedMessage message) { }
        public static string EscapePlaceholders(string? value) { }
    }
    public abstract class Formatter
    {
        protected Formatter() { }
        protected void AdvanceBy(int charCount) { }
        public System.ReadOnlySpan<char> FormatMessage(ZeroLog.Formatting.LoggedMessage message) { }
        protected System.Span<char> GetOutput() { }
        protected System.Span<char> GetRemainingBuffer() { }
        protected void Write(System.ReadOnlySpan<char> value) { }
        protected void WriteLine() { }
        protected void WriteLine(System.ReadOnlySpan<char> value) { }
        protected abstract void WriteMessage(ZeroLog.Formatting.LoggedMessage message);
    }
    public sealed class KeyValueList
    {
        public int Count { get; }
        public ZeroLog.Formatting.LoggedKeyValue this[int index] { get; }
        public ZeroLog.Formatting.KeyValueList.Enumerator GetEnumerator() { }
        [System.Runtime.CompilerServices.IsByRefLike]
        public struct Enumerator
        {
            public ZeroLog.Formatting.LoggedKeyValue Current { get; }
            public bool MoveNext() { }
        }
    }
    [System.Runtime.CompilerServices.IsByRefLike]
    public readonly struct LoggedKeyValue
    {
        public bool IsBoolean { get; }
        public bool IsNull { get; }
        public bool IsNumeric { get; }
        public string Key { get; }
        public System.ReadOnlySpan<char> Value { get; }
        public System.Type? ValueType { get; }
        public override string ToString() { }
        public bool TryGetValue<T>(out T result)
            where T :  unmanaged { }
    }
    public sealed class LoggedMessage
    {
        public System.Exception? Exception { get; }
        public ZeroLog.Formatting.KeyValueList KeyValues { get; }
        public ZeroLog.LogLevel Level { get; }
        public string? LoggerName { get; }
        public System.ReadOnlySpan<char> Message { get; }
        public System.Threading.Thread? Thread { get; }
        public System.DateTime Timestamp { get; }
        public ZeroLog.Formatting.LoggedMessage Clone() { }
        public override string ToString() { }
    }
}
namespace ZeroLog
{
    public sealed class Log
    {
        public bool IsDebugEnabled { get; }
        public bool IsErrorEnabled { get; }
        public bool IsFatalEnabled { get; }
        public bool IsInfoEnabled { get; }
        public bool IsTraceEnabled { get; }
        public bool IsWarnEnabled { get; }
        public ZeroLog.LogMessage Debug() { }
        public void Debug([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.DebugInterpolatedStringHandler message) { }
        public void Debug(string? message) { }
        public void Debug([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.DebugInterpolatedStringHandler message, System.Exception? ex) { }
        public void Debug(string? message, System.Exception? ex) { }
        public ZeroLog.LogMessage Error() { }
        public void Error([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.ErrorInterpolatedStringHandler message) { }
        public void Error(string? message) { }
        public void Error([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.ErrorInterpolatedStringHandler message, System.Exception? ex) { }
        public void Error(string? message, System.Exception? ex) { }
        public ZeroLog.LogMessage Fatal() { }
        public void Fatal([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.FatalInterpolatedStringHandler message) { }
        public void Fatal(string? message) { }
        public void Fatal([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.FatalInterpolatedStringHandler message, System.Exception? ex) { }
        public void Fatal(string? message, System.Exception? ex) { }
        public ZeroLog.LogMessage ForLevel(ZeroLog.LogLevel level) { }
        public ZeroLog.LogMessage Info() { }
        public void Info([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.InfoInterpolatedStringHandler message) { }
        public void Info(string? message) { }
        public void Info([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.InfoInterpolatedStringHandler message, System.Exception? ex) { }
        public void Info(string? message, System.Exception? ex) { }
        public bool IsEnabled(ZeroLog.LogLevel level) { }
        public override string ToString() { }
        public ZeroLog.LogMessage Trace() { }
        public void Trace([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.TraceInterpolatedStringHandler message) { }
        public void Trace(string? message) { }
        public void Trace([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.TraceInterpolatedStringHandler message, System.Exception? ex) { }
        public void Trace(string? message, System.Exception? ex) { }
        public ZeroLog.LogMessage Warn() { }
        public void Warn([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.WarnInterpolatedStringHandler message) { }
        public void Warn(string? message) { }
        public void Warn([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.Log.WarnInterpolatedStringHandler message, System.Exception? ex) { }
        public void Warn(string? message, System.Exception? ex) { }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct DebugInterpolatedStringHandler
        {
            public DebugInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct ErrorInterpolatedStringHandler
        {
            public ErrorInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct FatalInterpolatedStringHandler
        {
            public FatalInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct InfoInterpolatedStringHandler
        {
            public InfoInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct TraceInterpolatedStringHandler
        {
            public TraceInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct WarnInterpolatedStringHandler
        {
            public WarnInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.Log log, out bool isEnabled) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
    }
    public enum LogLevel
    {
        Trace = 0,
        Debug = 1,
        Info = 2,
        Warn = 3,
        Error = 4,
        Fatal = 5,
        None = 6,
    }
    public sealed class LogManager : System.IDisposable
    {
        public static ZeroLog.Configuration.ZeroLogConfiguration? Configuration { get; }
        public void Dispose() { }
        public static void Flush() { }
        public static ZeroLog.Log GetLogger(string name) { }
        public static ZeroLog.Log GetLogger(System.Type type) { }
        public static ZeroLog.Log GetLogger<T>() { }
        public static System.IDisposable Initialize(ZeroLog.Configuration.ZeroLogConfiguration configuration) { }
        public static void RegisterAllEnumsFrom(System.Reflection.Assembly assembly) { }
        public static void RegisterEnum(System.Type enumType) { }
        public static void RegisterEnum<T>()
            where T :  struct, System.Enum { }
        public static void RegisterUnmanaged(System.Type type) { }
        public static void RegisterUnmanaged<T>()
            where T :  unmanaged, System.ISpanFormattable { }
        public static void RegisterUnmanaged<T>(ZeroLog.UnmanagedFormatterDelegate<T> formatter)
            where T :  unmanaged { }
        public static void Shutdown() { }
    }
    public sealed class LogMessage
    {
        public System.Exception? Exception { get; }
        public ZeroLog.LogLevel Level { get; }
        public System.Threading.Thread? Thread { get; }
        public System.DateTime Timestamp { get; }
        public ZeroLog.LogMessage Append(bool value) { }
        public ZeroLog.LogMessage Append(byte value) { }
        public ZeroLog.LogMessage Append(char value) { }
        public ZeroLog.LogMessage Append(System.Char? value) { }
        public ZeroLog.LogMessage Append(System.DateOnly value) { }
        public ZeroLog.LogMessage Append(System.DateOnly? value) { }
        public ZeroLog.LogMessage Append(System.DateTime value) { }
        public ZeroLog.LogMessage Append(System.DateTime? value) { }
        public ZeroLog.LogMessage Append(System.DateTimeOffset value) { }
        public ZeroLog.LogMessage Append(System.DateTimeOffset? value) { }
        public ZeroLog.LogMessage Append(decimal value) { }
        public ZeroLog.LogMessage Append(double value) { }
        public ZeroLog.LogMessage Append(System.Guid value) { }
        public ZeroLog.LogMessage Append(System.Guid? value) { }
        public ZeroLog.LogMessage Append(short value) { }
        public ZeroLog.LogMessage Append(int value) { }
        public ZeroLog.LogMessage Append(long value) { }
        public ZeroLog.LogMessage Append(System.IntPtr value) { }
        public ZeroLog.LogMessage Append(System.IntPtr? value) { }
        public ZeroLog.LogMessage Append(System.ReadOnlySpan<byte> value) { }
        public ZeroLog.LogMessage Append(System.ReadOnlySpan<char> value) { }
        public ZeroLog.LogMessage Append(sbyte value) { }
        public ZeroLog.LogMessage Append(float value) { }
        public ZeroLog.LogMessage Append(System.TimeOnly value) { }
        public ZeroLog.LogMessage Append(System.TimeOnly? value) { }
        public ZeroLog.LogMessage Append(System.TimeSpan value) { }
        public ZeroLog.LogMessage Append(System.TimeSpan? value) { }
        public ZeroLog.LogMessage Append(ushort value) { }
        public ZeroLog.LogMessage Append(uint value) { }
        public ZeroLog.LogMessage Append(ulong value) { }
        public ZeroLog.LogMessage Append(System.UIntPtr value) { }
        public ZeroLog.LogMessage Append(System.UIntPtr? value) { }
        public ZeroLog.LogMessage Append([System.Runtime.CompilerServices.InterpolatedStringHandlerArgument("")] ZeroLog.LogMessage.AppendInterpolatedStringHandler value) { }
        public ZeroLog.LogMessage Append(bool? value) { }
        public ZeroLog.LogMessage Append(byte? value) { }
        public ZeroLog.LogMessage Append(decimal? value) { }
        public ZeroLog.LogMessage Append(double? value) { }
        public ZeroLog.LogMessage Append(float? value) { }
        public ZeroLog.LogMessage Append(int? value) { }
        public ZeroLog.LogMessage Append(long? value) { }
        public ZeroLog.LogMessage Append(sbyte? value) { }
        public ZeroLog.LogMessage Append(short? value) { }
        public ZeroLog.LogMessage Append(string? value) { }
        public ZeroLog.LogMessage Append(uint? value) { }
        public ZeroLog.LogMessage Append(ulong? value) { }
        public ZeroLog.LogMessage Append(ushort? value) { }
        public ZeroLog.LogMessage Append(byte value, string format) { }
        public ZeroLog.LogMessage Append(System.DateOnly value, string format) { }
        public ZeroLog.LogMessage Append(System.DateOnly? value, string format) { }
        public ZeroLog.LogMessage Append(System.DateTime value, string format) { }
        public ZeroLog.LogMessage Append(System.DateTime? value, string format) { }
        public ZeroLog.LogMessage Append(System.DateTimeOffset value, string format) { }
        public ZeroLog.LogMessage Append(System.DateTimeOffset? value, string format) { }
        public ZeroLog.LogMessage Append(decimal value, string format) { }
        public ZeroLog.LogMessage Append(double value, string format) { }
        public ZeroLog.LogMessage Append(System.Guid value, string format) { }
        public ZeroLog.LogMessage Append(System.Guid? value, string format) { }
        public ZeroLog.LogMessage Append(short value, string format) { }
        public ZeroLog.LogMessage Append(int value, string format) { }
        public ZeroLog.LogMessage Append(long value, string format) { }
        public ZeroLog.LogMessage Append(System.IntPtr value, string format) { }
        public ZeroLog.LogMessage Append(System.IntPtr? value, string format) { }
        public ZeroLog.LogMessage Append(sbyte value, string format) { }
        public ZeroLog.LogMessage Append(float value, string format) { }
        public ZeroLog.LogMessage Append(System.TimeOnly value, string format) { }
        public ZeroLog.LogMessage Append(System.TimeOnly? value, string format) { }
        public ZeroLog.LogMessage Append(System.TimeSpan value, string format) { }
        public ZeroLog.LogMessage Append(System.TimeSpan? value, string format) { }
        public ZeroLog.LogMessage Append(ushort value, string format) { }
        public ZeroLog.LogMessage Append(uint value, string format) { }
        public ZeroLog.LogMessage Append(ulong value, string format) { }
        public ZeroLog.LogMessage Append(System.UIntPtr value, string format) { }
        public ZeroLog.LogMessage Append(System.UIntPtr? value, string format) { }
        public ZeroLog.LogMessage Append(byte? value, string format) { }
        public ZeroLog.LogMessage Append(decimal? value, string format) { }
        public ZeroLog.LogMessage Append(double? value, string format) { }
        public ZeroLog.LogMessage Append(float? value, string format) { }
        public ZeroLog.LogMessage Append(int? value, string format) { }
        public ZeroLog.LogMessage Append(long? value, string format) { }
        public ZeroLog.LogMessage Append(sbyte? value, string format) { }
        public ZeroLog.LogMessage Append(short? value, string format) { }
        public ZeroLog.LogMessage Append(uint? value, string format) { }
        public ZeroLog.LogMessage Append(ulong? value, string format) { }
        public ZeroLog.LogMessage Append(ushort? value, string format) { }
        public ZeroLog.LogMessage AppendEnum<T>(T value)
            where T :  struct, System.Enum { }
        public ZeroLog.LogMessage AppendEnum<T>(T? value)
            where T :  struct, System.Enum { }
        public ZeroLog.LogMessage AppendKeyValue(string key, bool value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, byte value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, char value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.Char? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateOnly value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateOnly? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateTime value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateTime? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateTimeOffset value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.DateTimeOffset? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, decimal value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, double value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.Guid value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.Guid? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, short value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, int value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, long value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.IntPtr value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.IntPtr? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.ReadOnlySpan<byte> value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.ReadOnlySpan<char> value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, sbyte value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, float value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.TimeOnly value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.TimeOnly? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.TimeSpan value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.TimeSpan? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, ushort value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, uint value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, ulong value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.UIntPtr value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, System.UIntPtr? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, bool? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, byte? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, decimal? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, double? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, float? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, int? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, long? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, sbyte? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, short? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, string? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, uint? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, ulong? value) { }
        public ZeroLog.LogMessage AppendKeyValue(string key, ushort? value) { }
        public ZeroLog.LogMessage AppendKeyValue<T>(string key, T value)
            where T :  struct, System.Enum { }
        public ZeroLog.LogMessage AppendKeyValue<T>(string key, T? value)
            where T :  struct, System.Enum { }
        public ZeroLog.LogMessage AppendUnmanaged<T>(T value, string? format = null)
            where T :  unmanaged { }
        public ZeroLog.LogMessage AppendUnmanaged<T>(ref T value, string? format = null)
            where T :  unmanaged { }
        public ZeroLog.LogMessage AppendUnmanaged<T>(T? value, string? format = null)
            where T :  unmanaged { }
        public ZeroLog.LogMessage AppendUnmanaged<T>(ref T? value, string? format = null)
            where T :  unmanaged { }
        public void Log() { }
        public override string ToString() { }
        public ZeroLog.LogMessage WithException(System.Exception? exception) { }
        public static ZeroLog.LogMessage CreateTestMessage(ZeroLog.LogLevel level, int bufferSize, int stringCapacity) { }
        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        [System.Runtime.CompilerServices.IsByRefLike]
        public readonly struct AppendInterpolatedStringHandler
        {
            public AppendInterpolatedStringHandler(int literalLength, int formattedCount, ZeroLog.LogMessage message) { }
            public void AppendFormatted(bool value) { }
            public void AppendFormatted(byte value) { }
            public void AppendFormatted(char value) { }
            public void AppendFormatted(System.Char? value) { }
            public void AppendFormatted(System.DateOnly value) { }
            public void AppendFormatted(System.DateOnly? value) { }
            public void AppendFormatted(System.DateTime value) { }
            public void AppendFormatted(System.DateTime? value) { }
            public void AppendFormatted(System.DateTimeOffset value) { }
            public void AppendFormatted(System.DateTimeOffset? value) { }
            public void AppendFormatted(decimal value) { }
            public void AppendFormatted(double value) { }
            public void AppendFormatted(System.Guid value) { }
            public void AppendFormatted(System.Guid? value) { }
            public void AppendFormatted(short value) { }
            public void AppendFormatted(int value) { }
            public void AppendFormatted(long value) { }
            public void AppendFormatted(System.IntPtr value) { }
            public void AppendFormatted(System.IntPtr? value) { }
            public void AppendFormatted(System.ReadOnlySpan<byte> value) { }
            public void AppendFormatted(System.ReadOnlySpan<char> value) { }
            public void AppendFormatted(sbyte value) { }
            public void AppendFormatted(float value) { }
            public void AppendFormatted(System.TimeOnly value) { }
            public void AppendFormatted(System.TimeOnly? value) { }
            public void AppendFormatted(System.TimeSpan value) { }
            public void AppendFormatted(System.TimeSpan? value) { }
            public void AppendFormatted(ushort value) { }
            public void AppendFormatted(uint value) { }
            public void AppendFormatted(ulong value) { }
            public void AppendFormatted(System.UIntPtr value) { }
            public void AppendFormatted(System.UIntPtr? value) { }
            public void AppendFormatted(bool? value) { }
            public void AppendFormatted(byte? value) { }
            public void AppendFormatted(decimal? value) { }
            public void AppendFormatted(double? value) { }
            public void AppendFormatted(float? value) { }
            public void AppendFormatted(int? value) { }
            public void AppendFormatted(long? value) { }
            public void AppendFormatted(sbyte? value) { }
            public void AppendFormatted(short? value) { }
            public void AppendFormatted(string? value) { }
            public void AppendFormatted(uint? value) { }
            public void AppendFormatted(ulong? value) { }
            public void AppendFormatted(ushort? value) { }
            public void AppendFormatted(byte value, string format) { }
            public void AppendFormatted(System.DateOnly value, string format) { }
            public void AppendFormatted(System.DateOnly? value, string format) { }
            public void AppendFormatted(System.DateTime value, string format) { }
            public void AppendFormatted(System.DateTime? value, string format) { }
            public void AppendFormatted(System.DateTimeOffset value, string format) { }
            public void AppendFormatted(System.DateTimeOffset? value, string format) { }
            public void AppendFormatted(decimal value, string format) { }
            public void AppendFormatted(double value, string format) { }
            public void AppendFormatted(System.Guid value, string format) { }
            public void AppendFormatted(System.Guid? value, string format) { }
            public void AppendFormatted(short value, string format) { }
            public void AppendFormatted(int value, string format) { }
            public void AppendFormatted(long value, string format) { }
            public void AppendFormatted(System.IntPtr value, string format) { }
            public void AppendFormatted(System.IntPtr? value, string format) { }
            public void AppendFormatted(sbyte value, string format) { }
            public void AppendFormatted(float value, string format) { }
            public void AppendFormatted(System.TimeOnly value, string format) { }
            public void AppendFormatted(System.TimeOnly? value, string format) { }
            public void AppendFormatted(System.TimeSpan value, string format) { }
            public void AppendFormatted(System.TimeSpan? value, string format) { }
            public void AppendFormatted(ushort value, string format) { }
            public void AppendFormatted(uint value, string format) { }
            public void AppendFormatted(ulong value, string format) { }
            public void AppendFormatted(System.UIntPtr value, string format) { }
            public void AppendFormatted(System.UIntPtr? value, string format) { }
            public void AppendFormatted(byte? value, string format) { }
            public void AppendFormatted(decimal? value, string format) { }
            public void AppendFormatted(double? value, string format) { }
            public void AppendFormatted(float? value, string format) { }
            public void AppendFormatted(int? value, string format) { }
            public void AppendFormatted(long? value, string format) { }
            public void AppendFormatted(sbyte? value, string format) { }
            public void AppendFormatted(short? value, string format) { }
            public void AppendFormatted(uint? value, string format) { }
            public void AppendFormatted(ulong? value, string format) { }
            public void AppendFormatted(ushort? value, string format) { }
            public void AppendFormatted<T>(T value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(T? value)
                where T :  struct, System.Enum { }
            public void AppendFormatted<T>(ZeroLog.LogMessage.AppendOperation<T> operation) { }
            public void AppendLiteral(string value) { }
        }
        public readonly struct AppendOperation<T>
        {
            public AppendOperation(T? value, System.Action<ZeroLog.LogMessage, T?> appendAction) { }
            public System.Action<ZeroLog.LogMessage, T?>? AppendAction { get; }
            public T Value { get; }
            public override string ToString() { }
        }
    }
    public delegate bool UnmanagedFormatterDelegate<T>(ref T value, System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format);
}