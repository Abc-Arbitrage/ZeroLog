<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../ZeroLog.Impl.Base/LogMetadata.ttinclude" #>
<#
    var testFormats = new Dictionary<string, string>
    {
        { "Byte", "X" },
        { "SByte", "X" },
        { "Int16", "X" },
        { "UInt16", "X" },
        { "Int32", "X" },
        { "UInt32", "X" },
        { "Int64", "X" },
        { "UInt64", "X" },
        { "IntPtr", "X" },
        { "UIntPtr", "X" },
        { "Single", "F4" },
        { "Double", "F4" },
        { "Decimal", "F4" },
        { "Guid", "B" },
        { "DateTime", "yyyy-MM-dd" },
        { "TimeSpan", "g" }
    };
#>
using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using NUnit.Framework;
using ZeroLog.Configuration;
using ZeroLog.Tests.Support;

namespace ZeroLog.Tests;

[SuppressMessage("ReSharper", "RedundantCast")]
partial class LogTests
{
<#
    foreach (var logLevel in _logLevels)
    {
#>
    [Test]
    public void should_not_log_above_level_<#= logLevel #>()
    {
        _log.UpdateConfiguration(_provider, ResolvedLoggerConfiguration.SingleAppender(LogLevel.<#= logLevel #> + 1));
        _log.<#= logLevel #>("Foo");
        _provider.ShouldNotBeLogged();
    }

    [Test]
    public void should_not_log_above_level_<#= logLevel #>_interpolated()
    {
        _log.UpdateConfiguration(_provider, ResolvedLoggerConfiguration.SingleAppender(LogLevel.<#= logLevel #> + 1));
        _log.<#= logLevel #>($"Foo {42}");
        _provider.ShouldNotBeLogged();
    }

    [Test]
    public void should_log_with_append_<#= logLevel #>()
    {
        _log.<#= logLevel #>().Append("Foo").Log();

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("Foo");
        message.Exception.ShouldBeNull();
    }

    [Test]
    public void should_log_String_<#= logLevel #>()
    {
        _log.<#= logLevel #>("foo");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("foo");
        message.Exception.ShouldBeNull();
    }

    [Test]
    public void should_log_Exception_<#= logLevel #>()
    {
        var exception = new InvalidOperationException();
        _log.<#= logLevel #>("Foo", exception);

        var message = _provider.GetSubmittedMessage();
        message.ToString().ShouldEqual("Foo");
        message.Exception.ShouldBeTheSameAs(exception);
    }

    [Test]
    public void should_log_interpolated_String_<#= logLevel #>()
    {
        _log.<#= logLevel #>($"foo {NoInline("bar")} baz {NoInline("foobar")}");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("foo bar baz foobar");
        message.Exception.ShouldBeNull();
    }

    [Test]
    public void should_log_interpolated_Exception_<#= logLevel #>()
    {
        var exception = new InvalidOperationException();
        _log.<#= logLevel #>($"Foo {42}", exception);

        var message = _provider.GetSubmittedMessage();
        message.ToString().ShouldEqual("Foo 42");
        message.Exception.ShouldBeTheSameAs(exception);
    }

    [Test]
    public void should_not_allocate_String_<#= logLevel #>()
    {
        GcTester.ShouldNotAllocate(() => _log.<#= logLevel #>("Foo"));
    }

    [Test]
    public void should_not_allocate_interpolated_String_<#= logLevel #>()
    {
        GcTester.ShouldNotAllocate(() => _log.<#= logLevel #>($"foo {NoInline("bar")} baz {NoInline("foobar")}"));
    }

<#
        foreach (var type in _valueTypes)
        {
#>
    [Test]
    public void should_log_<#= type.argType #>_<#= logLevel #>()
    {
        _log.<#= logLevel #>($"foo {TestValues.<#= type.argType #>} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual(FormattableString.Invariant($"foo {TestValues.<#= type.argType #>} bar"));
    }

    [Test]
    public void should_log_<#= type.argType #>_<#= logLevel #>_nullable()
    {
        _log.<#= logLevel #>($"foo {(<#= type.name #>?)TestValues.<#= type.argType #>} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual(FormattableString.Invariant($"foo {TestValues.<#= type.argType #>} bar"));
    }

<#
            if (type.isFormattable)
            {
#>
    [Test]
    public void should_log_<#= type.argType #>_<#= logLevel #>_formatted()
    {
        _log.<#= logLevel #>($"foo {TestValues.<#= type.argType #>:<#= testFormats[type.argType] #>} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual($"foo {TestValues.<#= type.argType #>.ToString("<#= testFormats[type.argType] #>", CultureInfo.InvariantCulture)} bar");
    }

    [Test]
    public void should_log_<#= type.argType #>_<#= logLevel #>_nullable_formatted()
    {
        _log.<#= logLevel #>($"foo {(<#= type.name #>?)TestValues.<#= type.argType #>:<#= testFormats[type.argType] #>} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual($"foo {TestValues.<#= type.argType #>.ToString("<#= testFormats[type.argType] #>", CultureInfo.InvariantCulture)} bar");
    }

<#
            }
#>
    [Test]
    public void should_not_allocate_<#= type.argType #>_<#= logLevel #>()
    {
        GcTester.ShouldNotAllocate(() => _log.<#= logLevel #>($"foo {TestValues.<#= type.argType #>} bar"));
    }

<#
        }
#>
    [Test]
    public void should_log_Enum_<#= logLevel #>()
    {
        _log.<#= logLevel #>($"foo {DayOfWeek.Friday} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("foo Friday bar");
    }

    [Test]
    public void should_log_Enum_<#= logLevel #>_nullable()
    {
        _log.<#= logLevel #>($"foo {(DayOfWeek?)DayOfWeek.Friday} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("foo Friday bar");
    }

    [Test]
    public void should_not_allocate_Enum_<#= logLevel #>()
    {
        GcTester.ShouldNotAllocate(() => _log.<#= logLevel #>($"foo {DayOfWeek.Friday} bar"));
    }

    [Test]
    public void should_log_indirect_<#= logLevel #>()
    {
        _log.<#= logLevel #>($"foo {new LogMessage.AppendOperation<int>(40, static (msg, i) => msg.Append(i + 2))} bar");

        var message = _provider.GetSubmittedMessage();
        message.Level.ShouldEqual(LogLevel.<#= logLevel #>);
        message.ToString().ShouldEqual("foo 42 bar");
    }

    [Test]
    public void should_not_allocate_indirect_<#= logLevel #>()
    {
        GcTester.ShouldNotAllocate(() => _log.<#= logLevel #>($"foo {new LogMessage.AppendOperation<int>(40, static (msg, i) => msg.Append(i + 2))} bar"));
    }

<#
    }
#>
}
